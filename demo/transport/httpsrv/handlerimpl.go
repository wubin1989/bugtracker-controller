/**
* Generated by go-doudou v2.0.1.
* You can edit it as your need.
 */
package httpsrv

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/pkg/errors"
	"github.com/unionj-cloud/go-doudou/v2/framework/rest"
	service "github.com/wubin1989/bugtracker-controller/demo"
)

type DemoHandlerImpl struct {
	demo service.Demo
}

func (receiver *DemoHandlerImpl) GetHealth(_writer http.ResponseWriter, _req *http.Request) {
	var (
		ctx    context.Context
		status string
		err    error
	)
	ctx = _req.Context()
	status, err = receiver.demo.GetHealth(
		ctx,
	)
	if err != nil {
		if errors.Is(err, context.Canceled) {
			http.Error(_writer, err.Error(), http.StatusBadRequest)
		} else if _err, ok := err.(*rest.BizError); ok {
			http.Error(_writer, _err.Error(), _err.StatusCode)
		} else {
			http.Error(_writer, err.Error(), http.StatusInternalServerError)
		}
		return
	}
	if _err := json.NewEncoder(_writer).Encode(struct {
		Status string `json:"status"`
	}{
		Status: status,
	}); _err != nil {
		http.Error(_writer, _err.Error(), http.StatusInternalServerError)
		return
	}
}

func NewDemoHandler(demo service.Demo) DemoHandler {
	return &DemoHandlerImpl{
		demo,
	}
}
